#BlueJ class context
comment0.target=SLL
comment1.params=
comment1.target=SLL()
comment1.text=Create\ an\ new\ empty\ list.
comment10.params=
comment10.target=boolean\ hasNext()
comment11.params=
comment11.target=java.lang.Comparable\ next()
comment12.params=
comment12.target=void\ remove()
comment13.params=f
comment13.target=boolean\ contains(java.lang.Comparable)
comment13.text=\ Return\ true\ if\ the\ list\ contains\ f.\ \r\n\ \ @return\ true\ if\ f\ is\ in\ the\ list,\ false\ otherwise.\ \r\n
comment14.params=f
comment14.target=java.lang.Comparable\ find(java.lang.Comparable)
comment14.text=\ Return\ a\ pointer\ to\ the\ node\ in\ the\ list\ that\ is\ equal\ to\ f.\ \r\n\ \ @return\ a\ pointer\ to\ T\r\n\ \ @param\ f\ the\ object\ to\ find.\ \r\n
comment15.params=i
comment15.target=java.lang.Comparable\ get(int)
comment15.text=\ Return\ the\ ith\ element\ of\ the\ list.\r\n\ \ @param\ i\ the\ element\ to\ return\r\n\ \ @return\ the\ ith\ element,\ null\ if\ there\ isnt\ one.\ \r\n
comment16.params=n
comment16.target=void\ addHead(SLL.Node)
comment16.text=\ Add\ a\ new\ Node\ to\ the\ head\ of\ the\ list.\ \r\n
comment17.params=n
comment17.target=void\ addTail(SLL.Node)
comment17.text=\ Add\ a\ new\ Node\ to\ the\ tail\ of\ the\ list.\ \r\n
comment18.params=n\ c
comment18.target=void\ addInOrder(SLL.Node,\ java.util.Comparator)
comment18.text=\ This\ method\ does\ the\ heavy\ lifting\ for\ adding\ nodes\ in\ order.\ \r\n\ Adds\ n\ in\ the\ correct\ order\ based\ on\ c,\ or\ the\ natural\ order\ if\ c\ is\ null.\ \r\n
comment19.params=
comment19.target=SLL.Node\ delHead()
comment19.text=\ Delete\ the\ node\ at\ the\ head\ of\ the\ list\ and\ return\ a\ pointer\ to\ it.\ \r\n
comment2.params=
comment2.target=int\ size()
comment2.text=\ Return\ the\ number\ of\ elements\ in\ the\ list.\ \r\n\ \ @return\ int\ number\ of\ elements\ \ in\ the\ list.\ \r\n
comment20.params=n1\ n2\ c
comment20.target=int\ compareNodes(SLL.Node,\ SLL.Node,\ java.util.Comparator)
comment20.text=\ Helper\ method.\ Compares\ the\ data\ in\ two\ nodes,\ either\ the\ comparator\ c\ or\ \r\n\ by\ the\ natural\ ordering.\ \r\n
comment3.params=
comment3.target=void\ emptyList()
comment3.text=\ Empty\ the\ list.\ \r\n
comment4.params=t
comment4.target=void\ add(java.lang.Comparable)
comment4.text=\ Add\ a\ new\ object\ t,\ to\ the\ list.\ \r\n\ \ It\ will\ be\ added\ in\ order\ of\ the\ natural\ ordering\ of\ T.\ \r\n\ \ @param\ t\ the\ object\ to\ add\r\n
comment5.params=t\ c
comment5.target=void\ add(java.lang.Comparable,\ java.util.Comparator)
comment5.text=\ Add\ a\ new\ object\ t,\ to\ the\ list.\ \r\n\ \ It\ will\ be\ added\ in\ the\ order\ specified\ by\ c.\r\n\ \ @param\ t\ the\ object\ to\ add\r\n\ \ @param\ c\ the\ comparator\ to\ use\r\n
comment6.params=t
comment6.target=void\ addHead(java.lang.Comparable)
comment6.text=\ Add\ a\ new\ object\ t\ to\ the\ head\ of\ the\ list.\ \r\n\ \ @param\ t\ the\ object\ to\ add.\ \r\n
comment7.params=t
comment7.target=void\ addTail(java.lang.Comparable)
comment7.text=\ Add\ a\ new\ object\ i\ to\ the\ tail\ of\ the\ list.\ \r\n\ \ @param\ t\ the\ object\ to\ add.\ \r\n
comment8.params=
comment8.target=java.lang.Comparable\ deleteHead()
comment8.text=\ Delete\ the\ element\ at\ the\ head\ of\ the\ list.\ \r\n\ \ @return\ the\ deleted\ element.\ \r\n
comment9.params=
comment9.target=java.util.Iterator\ iterator()
comment9.text=\ Return\ an\ Iterator\ over\ this\ list.\ \r\n\ \ @returns\ an\ iterator\r\n
numComments=21
